% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setup-python-pkgs.R
\name{setup_py_env}
\alias{setup_py_env}
\title{Set up a python environment with required packages}
\usage{
setup_py_env(
  py_pkgs = c("scipy", "pandas"),
  python_version = NULL,
  py_env = c("conda", "virtual"),
  env_name = PYTHON_R_ENV,
  conda_path = get_conda_envs(),
  update = FALSE,
  required = FALSE
)
}
\arguments{
\item{py_pkgs}{vector of python packages to install}

\item{python_version}{The requested Python version. Ignored when attempting
to install with a Python virtual environment.}

\item{py_env}{Environment type. Either a conda or virtual environment.}

\item{env_name}{an environment name to use for \strong{new} virtual or conda environments.}

\item{conda_path}{path of the conda environment to use if \code{py_env = "conda"}.
Run \code{reticulate::conda_list()} to see a list of available conda environments.
The \code{conda_path} should match the \code{python} element of that list if you are loading
\emph{an existing} conda environment. If \code{conda_path} is not found in this list, a new
one will be created matching the name of \code{env_name}.}

\item{update}{Logical (\code{TRUE}/\code{FALSE}). If \code{TRUE}, update packages that are
already installed. Otherwise skip their installation.}

\item{required}{Logical (\code{TRUE}/\code{FALSE}). Is the requested copy of Python required?
If TRUE, an error will be emitted if the requested copy of Python does not exist.
If FALSE, the request is taken as a hint only, and scanning for other versions
will still proceed. See \code{\link[reticulate:use_python]{reticulate::use_condaenv()}} for more details.}
}
\value{
a named list of specifications pertaining to the python environment,
including the packages that are installed there.
}
\description{
Set up a python environment with required packages
}
\details{
We will want to \emph{install} all packages we need for the app once at the beginning,
and then \emph{import} packages one at a time within each function that needs them

If we use a virtual/conda environment, we are only using that for packages that dont
come with base python. i.e. the user still needs to have python installed.

An environment will be required for each new R session.

For a virtual environment, the user would be installing these packages \emph{every time}
they want to run the app on a clean R session.

For a conda environment, users would only need to install the required
packages once. I think this could be preferable, and would offer significant
speed improvements once the packages have been installed once.
}
\note{
You must restart your R session if you want to alternate between both environment types
}
\examples{
\dontrun{

## With a conda environment (the default) ##
# much faster loading time after you've installed the packages once
py_env <- setup_py_env(py_pkgs = c("pandas", "numpy", "scipy"))
py_env

# put the conda environment under a specific name
# note: you must restart your R session if you've already generated an environment
py_env <- setup_py_env(
  py_pkgs = c("pandas", "numpy", "scipy"),
  conda_path = "/data/.conda/envs/base/bin/python",
  update = TRUE
)

## With a virtual environment ##
py_env <- setup_py_env(py_pkgs = c("pandas", "numpy", "scipy"), py_env = "virtual")
py_env

# shutdown virtual environment
shutdown_virtual_env(py_env$env_name)

# Installing a package after setup (works with both environment types)
py_env <- setup_py_env(py_pkgs = c("pandas", "numpy"), py_env = "conda")
install_py_pkgs(py_pkgs = c('scipy'), env_name = py_env$env_name)

}

}
